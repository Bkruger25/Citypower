'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace InsertService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WorkflowEngineSOASoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WorkflowEngineSOA
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private pingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCasesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private performActivityAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setEventAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCasesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveActivityAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getActivitiesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private suspendCasesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private resumeCasesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getClosedActivitiesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEventsAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkflowClassesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCategoriesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private abortCasesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAssignationLogAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private assignActivityAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private grantCaseAccessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private revokeCaseAccessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cleanTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private evalRuleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getActivitiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAssignationLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getClosedActivitiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private performActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private resumeCasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private rollbackCaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private suspendCasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private abortCasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getApplicationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCategoriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCategories2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCategoriesFromApplicationNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkflowClassesFromCategoryNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCategoriesLocalizedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkflowClassesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkflowClasses2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEventsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private assignActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WebTaskVB.My.MySettings.Default.WebTaskVB_InsertService_WorkflowEngineSOA
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event pingCompleted As pingCompletedEventHandler
        
        '''<remarks/>
        Public Event createCasesAsStringCompleted As createCasesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event performActivityAsStringCompleted As performActivityAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event setEventAsStringCompleted As setEventAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getCasesAsStringCompleted As getCasesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event saveActivityAsStringCompleted As saveActivityAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getActivitiesAsStringCompleted As getActivitiesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event suspendCasesAsStringCompleted As suspendCasesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event resumeCasesAsStringCompleted As resumeCasesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getClosedActivitiesAsStringCompleted As getClosedActivitiesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getEventsAsStringCompleted As getEventsAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkflowClassesAsStringCompleted As getWorkflowClassesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getCategoriesAsStringCompleted As getCategoriesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event abortCasesAsStringCompleted As abortCasesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getAssignationLogAsStringCompleted As getAssignationLogAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPasswordCompleted As CheckPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event assignActivityAsStringCompleted As assignActivityAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event grantCaseAccessCompleted As grantCaseAccessCompletedEventHandler
        
        '''<remarks/>
        Public Event revokeCaseAccessCompleted As revokeCaseAccessCompletedEventHandler
        
        '''<remarks/>
        Public Event cleanTestDataCompleted As cleanTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event createCasesCompleted As createCasesCompletedEventHandler
        
        '''<remarks/>
        Public Event evalRuleCompleted As evalRuleCompletedEventHandler
        
        '''<remarks/>
        Public Event getActivitiesCompleted As getActivitiesCompletedEventHandler
        
        '''<remarks/>
        Public Event getAssignationLogCompleted As getAssignationLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getClosedActivitiesCompleted As getClosedActivitiesCompletedEventHandler
        
        '''<remarks/>
        Public Event performActivityCompleted As performActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event resumeCasesCompleted As resumeCasesCompletedEventHandler
        
        '''<remarks/>
        Public Event rollbackCaseCompleted As rollbackCaseCompletedEventHandler
        
        '''<remarks/>
        Public Event setEventCompleted As setEventCompletedEventHandler
        
        '''<remarks/>
        Public Event suspendCasesCompleted As suspendCasesCompletedEventHandler
        
        '''<remarks/>
        Public Event abortCasesCompleted As abortCasesCompletedEventHandler
        
        '''<remarks/>
        Public Event getApplicationsCompleted As getApplicationsCompletedEventHandler
        
        '''<remarks/>
        Public Event getCategoriesCompleted As getCategoriesCompletedEventHandler
        
        '''<remarks/>
        Public Event getCategories2Completed As getCategories2CompletedEventHandler
        
        '''<remarks/>
        Public Event getCategoriesFromApplicationNameCompleted As getCategoriesFromApplicationNameCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkflowClassesFromCategoryNameCompleted As getWorkflowClassesFromCategoryNameCompletedEventHandler
        
        '''<remarks/>
        Public Event getCategoriesLocalizedCompleted As getCategoriesLocalizedCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkflowClassesCompleted As getWorkflowClassesCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkflowClasses2Completed As getWorkflowClasses2CompletedEventHandler
        
        '''<remarks/>
        Public Event getEventsCompleted As getEventsCompletedEventHandler
        
        '''<remarks/>
        Public Event getCasesCompleted As getCasesCompletedEventHandler
        
        '''<remarks/>
        Public Event saveActivityCompleted As saveActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event assignActivityCompleted As assignActivityCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ping", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ping(ByVal sMessage As String) As String
            Dim results() As Object = Me.Invoke("ping", New Object() {sMessage})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub pingAsync(ByVal sMessage As String)
            Me.pingAsync(sMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub pingAsync(ByVal sMessage As String, ByVal userState As Object)
            If (Me.pingOperationCompleted Is Nothing) Then
                Me.pingOperationCompleted = AddressOf Me.OnpingOperationCompleted
            End If
            Me.InvokeAsync("ping", New Object() {sMessage}, Me.pingOperationCompleted, userState)
        End Sub
        
        Private Sub OnpingOperationCompleted(ByVal arg As Object)
            If (Not (Me.pingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent pingCompleted(Me, New pingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/createCasesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCasesAsString(ByVal casesInfo As String) As String
            Dim results() As Object = Me.Invoke("createCasesAsString", New Object() {casesInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCasesAsStringAsync(ByVal casesInfo As String)
            Me.createCasesAsStringAsync(casesInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCasesAsStringAsync(ByVal casesInfo As String, ByVal userState As Object)
            If (Me.createCasesAsStringOperationCompleted Is Nothing) Then
                Me.createCasesAsStringOperationCompleted = AddressOf Me.OncreateCasesAsStringOperationCompleted
            End If
            Me.InvokeAsync("createCasesAsString", New Object() {casesInfo}, Me.createCasesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCasesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCasesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCasesAsStringCompleted(Me, New createCasesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/performActivityAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function performActivityAsString(ByVal activityInfo As String) As String
            Dim results() As Object = Me.Invoke("performActivityAsString", New Object() {activityInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub performActivityAsStringAsync(ByVal activityInfo As String)
            Me.performActivityAsStringAsync(activityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub performActivityAsStringAsync(ByVal activityInfo As String, ByVal userState As Object)
            If (Me.performActivityAsStringOperationCompleted Is Nothing) Then
                Me.performActivityAsStringOperationCompleted = AddressOf Me.OnperformActivityAsStringOperationCompleted
            End If
            Me.InvokeAsync("performActivityAsString", New Object() {activityInfo}, Me.performActivityAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnperformActivityAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.performActivityAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent performActivityAsStringCompleted(Me, New performActivityAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setEventAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setEventAsString(ByVal eventInfo As String) As String
            Dim results() As Object = Me.Invoke("setEventAsString", New Object() {eventInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setEventAsStringAsync(ByVal eventInfo As String)
            Me.setEventAsStringAsync(eventInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setEventAsStringAsync(ByVal eventInfo As String, ByVal userState As Object)
            If (Me.setEventAsStringOperationCompleted Is Nothing) Then
                Me.setEventAsStringOperationCompleted = AddressOf Me.OnsetEventAsStringOperationCompleted
            End If
            Me.InvokeAsync("setEventAsString", New Object() {eventInfo}, Me.setEventAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetEventAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.setEventAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setEventAsStringCompleted(Me, New setEventAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCasesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCasesAsString(ByVal caseFilters As String) As String
            Dim results() As Object = Me.Invoke("getCasesAsString", New Object() {caseFilters})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCasesAsStringAsync(ByVal caseFilters As String)
            Me.getCasesAsStringAsync(caseFilters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCasesAsStringAsync(ByVal caseFilters As String, ByVal userState As Object)
            If (Me.getCasesAsStringOperationCompleted Is Nothing) Then
                Me.getCasesAsStringOperationCompleted = AddressOf Me.OngetCasesAsStringOperationCompleted
            End If
            Me.InvokeAsync("getCasesAsString", New Object() {caseFilters}, Me.getCasesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCasesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCasesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCasesAsStringCompleted(Me, New getCasesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveActivityAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveActivityAsString(ByVal activityInfo As String) As String
            Dim results() As Object = Me.Invoke("saveActivityAsString", New Object() {activityInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveActivityAsStringAsync(ByVal activityInfo As String)
            Me.saveActivityAsStringAsync(activityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveActivityAsStringAsync(ByVal activityInfo As String, ByVal userState As Object)
            If (Me.saveActivityAsStringOperationCompleted Is Nothing) Then
                Me.saveActivityAsStringOperationCompleted = AddressOf Me.OnsaveActivityAsStringOperationCompleted
            End If
            Me.InvokeAsync("saveActivityAsString", New Object() {activityInfo}, Me.saveActivityAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveActivityAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveActivityAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveActivityAsStringCompleted(Me, New saveActivityAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getActivitiesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getActivitiesAsString(ByVal activityFilters As String) As String
            Dim results() As Object = Me.Invoke("getActivitiesAsString", New Object() {activityFilters})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getActivitiesAsStringAsync(ByVal activityFilters As String)
            Me.getActivitiesAsStringAsync(activityFilters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getActivitiesAsStringAsync(ByVal activityFilters As String, ByVal userState As Object)
            If (Me.getActivitiesAsStringOperationCompleted Is Nothing) Then
                Me.getActivitiesAsStringOperationCompleted = AddressOf Me.OngetActivitiesAsStringOperationCompleted
            End If
            Me.InvokeAsync("getActivitiesAsString", New Object() {activityFilters}, Me.getActivitiesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetActivitiesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getActivitiesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getActivitiesAsStringCompleted(Me, New getActivitiesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/suspendCasesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function suspendCasesAsString(ByVal cases As String) As String
            Dim results() As Object = Me.Invoke("suspendCasesAsString", New Object() {cases})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub suspendCasesAsStringAsync(ByVal cases As String)
            Me.suspendCasesAsStringAsync(cases, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendCasesAsStringAsync(ByVal cases As String, ByVal userState As Object)
            If (Me.suspendCasesAsStringOperationCompleted Is Nothing) Then
                Me.suspendCasesAsStringOperationCompleted = AddressOf Me.OnsuspendCasesAsStringOperationCompleted
            End If
            Me.InvokeAsync("suspendCasesAsString", New Object() {cases}, Me.suspendCasesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnsuspendCasesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.suspendCasesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent suspendCasesAsStringCompleted(Me, New suspendCasesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/resumeCasesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function resumeCasesAsString(ByVal cases As String) As String
            Dim results() As Object = Me.Invoke("resumeCasesAsString", New Object() {cases})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub resumeCasesAsStringAsync(ByVal cases As String)
            Me.resumeCasesAsStringAsync(cases, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeCasesAsStringAsync(ByVal cases As String, ByVal userState As Object)
            If (Me.resumeCasesAsStringOperationCompleted Is Nothing) Then
                Me.resumeCasesAsStringOperationCompleted = AddressOf Me.OnresumeCasesAsStringOperationCompleted
            End If
            Me.InvokeAsync("resumeCasesAsString", New Object() {cases}, Me.resumeCasesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnresumeCasesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.resumeCasesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent resumeCasesAsStringCompleted(Me, New resumeCasesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getClosedActivitiesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getClosedActivitiesAsString(ByVal caseInfo As String) As String
            Dim results() As Object = Me.Invoke("getClosedActivitiesAsString", New Object() {caseInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getClosedActivitiesAsStringAsync(ByVal caseInfo As String)
            Me.getClosedActivitiesAsStringAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClosedActivitiesAsStringAsync(ByVal caseInfo As String, ByVal userState As Object)
            If (Me.getClosedActivitiesAsStringOperationCompleted Is Nothing) Then
                Me.getClosedActivitiesAsStringOperationCompleted = AddressOf Me.OngetClosedActivitiesAsStringOperationCompleted
            End If
            Me.InvokeAsync("getClosedActivitiesAsString", New Object() {caseInfo}, Me.getClosedActivitiesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetClosedActivitiesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getClosedActivitiesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getClosedActivitiesAsStringCompleted(Me, New getClosedActivitiesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEventsAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEventsAsString(ByVal actFilters As String) As String
            Dim results() As Object = Me.Invoke("getEventsAsString", New Object() {actFilters})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEventsAsStringAsync(ByVal actFilters As String)
            Me.getEventsAsStringAsync(actFilters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEventsAsStringAsync(ByVal actFilters As String, ByVal userState As Object)
            If (Me.getEventsAsStringOperationCompleted Is Nothing) Then
                Me.getEventsAsStringOperationCompleted = AddressOf Me.OngetEventsAsStringOperationCompleted
            End If
            Me.InvokeAsync("getEventsAsString", New Object() {actFilters}, Me.getEventsAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEventsAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEventsAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEventsAsStringCompleted(Me, New getEventsAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getWorkflowClassesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkflowClassesAsString(ByVal category As String) As String
            Dim results() As Object = Me.Invoke("getWorkflowClassesAsString", New Object() {category})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClassesAsStringAsync(ByVal category As String)
            Me.getWorkflowClassesAsStringAsync(category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClassesAsStringAsync(ByVal category As String, ByVal userState As Object)
            If (Me.getWorkflowClassesAsStringOperationCompleted Is Nothing) Then
                Me.getWorkflowClassesAsStringOperationCompleted = AddressOf Me.OngetWorkflowClassesAsStringOperationCompleted
            End If
            Me.InvokeAsync("getWorkflowClassesAsString", New Object() {category}, Me.getWorkflowClassesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkflowClassesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkflowClassesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkflowClassesAsStringCompleted(Me, New getWorkflowClassesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCategoriesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCategoriesAsString(ByVal appName As String) As String
            Dim results() As Object = Me.Invoke("getCategoriesAsString", New Object() {appName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCategoriesAsStringAsync(ByVal appName As String)
            Me.getCategoriesAsStringAsync(appName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCategoriesAsStringAsync(ByVal appName As String, ByVal userState As Object)
            If (Me.getCategoriesAsStringOperationCompleted Is Nothing) Then
                Me.getCategoriesAsStringOperationCompleted = AddressOf Me.OngetCategoriesAsStringOperationCompleted
            End If
            Me.InvokeAsync("getCategoriesAsString", New Object() {appName}, Me.getCategoriesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCategoriesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCategoriesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCategoriesAsStringCompleted(Me, New getCategoriesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/abortCasesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function abortCasesAsString(ByVal info As String) As String
            Dim results() As Object = Me.Invoke("abortCasesAsString", New Object() {info})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub abortCasesAsStringAsync(ByVal info As String)
            Me.abortCasesAsStringAsync(info, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub abortCasesAsStringAsync(ByVal info As String, ByVal userState As Object)
            If (Me.abortCasesAsStringOperationCompleted Is Nothing) Then
                Me.abortCasesAsStringOperationCompleted = AddressOf Me.OnabortCasesAsStringOperationCompleted
            End If
            Me.InvokeAsync("abortCasesAsString", New Object() {info}, Me.abortCasesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnabortCasesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.abortCasesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent abortCasesAsStringCompleted(Me, New abortCasesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAssignationLogAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAssignationLogAsString(ByVal info As String) As String
            Dim results() As Object = Me.Invoke("getAssignationLogAsString", New Object() {info})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAssignationLogAsStringAsync(ByVal info As String)
            Me.getAssignationLogAsStringAsync(info, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAssignationLogAsStringAsync(ByVal info As String, ByVal userState As Object)
            If (Me.getAssignationLogAsStringOperationCompleted Is Nothing) Then
                Me.getAssignationLogAsStringOperationCompleted = AddressOf Me.OngetAssignationLogAsStringOperationCompleted
            End If
            Me.InvokeAsync("getAssignationLogAsString", New Object() {info}, Me.getAssignationLogAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAssignationLogAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAssignationLogAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAssignationLogAsStringCompleted(Me, New getAssignationLogAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPassword(ByVal sDomain As String, ByVal sUserName As String, ByVal sPassword As String) As Integer
            Dim results() As Object = Me.Invoke("CheckPassword", New Object() {sDomain, sUserName, sPassword})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPasswordAsync(ByVal sDomain As String, ByVal sUserName As String, ByVal sPassword As String)
            Me.CheckPasswordAsync(sDomain, sUserName, sPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPasswordAsync(ByVal sDomain As String, ByVal sUserName As String, ByVal sPassword As String, ByVal userState As Object)
            If (Me.CheckPasswordOperationCompleted Is Nothing) Then
                Me.CheckPasswordOperationCompleted = AddressOf Me.OnCheckPasswordOperationCompleted
            End If
            Me.InvokeAsync("CheckPassword", New Object() {sDomain, sUserName, sPassword}, Me.CheckPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPasswordCompleted(Me, New CheckPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/assignActivityAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function assignActivityAsString(ByVal info As String) As String
            Dim results() As Object = Me.Invoke("assignActivityAsString", New Object() {info})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub assignActivityAsStringAsync(ByVal info As String)
            Me.assignActivityAsStringAsync(info, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub assignActivityAsStringAsync(ByVal info As String, ByVal userState As Object)
            If (Me.assignActivityAsStringOperationCompleted Is Nothing) Then
                Me.assignActivityAsStringOperationCompleted = AddressOf Me.OnassignActivityAsStringOperationCompleted
            End If
            Me.InvokeAsync("assignActivityAsString", New Object() {info}, Me.assignActivityAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnassignActivityAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.assignActivityAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent assignActivityAsStringCompleted(Me, New assignActivityAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/grantCaseAccess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function grantCaseAccess(ByVal caseAccessXML As String) As String
            Dim results() As Object = Me.Invoke("grantCaseAccess", New Object() {caseAccessXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub grantCaseAccessAsync(ByVal caseAccessXML As String)
            Me.grantCaseAccessAsync(caseAccessXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub grantCaseAccessAsync(ByVal caseAccessXML As String, ByVal userState As Object)
            If (Me.grantCaseAccessOperationCompleted Is Nothing) Then
                Me.grantCaseAccessOperationCompleted = AddressOf Me.OngrantCaseAccessOperationCompleted
            End If
            Me.InvokeAsync("grantCaseAccess", New Object() {caseAccessXML}, Me.grantCaseAccessOperationCompleted, userState)
        End Sub
        
        Private Sub OngrantCaseAccessOperationCompleted(ByVal arg As Object)
            If (Not (Me.grantCaseAccessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent grantCaseAccessCompleted(Me, New grantCaseAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/revokeCaseAccess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function revokeCaseAccess(ByVal caseAccessXML As String) As String
            Dim results() As Object = Me.Invoke("revokeCaseAccess", New Object() {caseAccessXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub revokeCaseAccessAsync(ByVal caseAccessXML As String)
            Me.revokeCaseAccessAsync(caseAccessXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub revokeCaseAccessAsync(ByVal caseAccessXML As String, ByVal userState As Object)
            If (Me.revokeCaseAccessOperationCompleted Is Nothing) Then
                Me.revokeCaseAccessOperationCompleted = AddressOf Me.OnrevokeCaseAccessOperationCompleted
            End If
            Me.InvokeAsync("revokeCaseAccess", New Object() {caseAccessXML}, Me.revokeCaseAccessOperationCompleted, userState)
        End Sub
        
        Private Sub OnrevokeCaseAccessOperationCompleted(ByVal arg As Object)
            If (Not (Me.revokeCaseAccessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent revokeCaseAccessCompleted(Me, New revokeCaseAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cleanTestData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cleanTestData(ByVal caseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("cleanTestData", New Object() {caseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cleanTestDataAsync(ByVal caseInfo As System.Xml.XmlNode)
            Me.cleanTestDataAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cleanTestDataAsync(ByVal caseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.cleanTestDataOperationCompleted Is Nothing) Then
                Me.cleanTestDataOperationCompleted = AddressOf Me.OncleanTestDataOperationCompleted
            End If
            Me.InvokeAsync("cleanTestData", New Object() {caseInfo}, Me.cleanTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OncleanTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.cleanTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cleanTestDataCompleted(Me, New cleanTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/createCases", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCases(ByVal casesInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("createCases", New Object() {casesInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCasesAsync(ByVal casesInfo As System.Xml.XmlNode)
            Me.createCasesAsync(casesInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCasesAsync(ByVal casesInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.createCasesOperationCompleted Is Nothing) Then
                Me.createCasesOperationCompleted = AddressOf Me.OncreateCasesOperationCompleted
            End If
            Me.InvokeAsync("createCases", New Object() {casesInfo}, Me.createCasesOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCasesCompleted(Me, New createCasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/evalRule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function evalRule(ByVal assertionInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("evalRule", New Object() {assertionInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub evalRuleAsync(ByVal assertionInfo As System.Xml.XmlNode)
            Me.evalRuleAsync(assertionInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub evalRuleAsync(ByVal assertionInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.evalRuleOperationCompleted Is Nothing) Then
                Me.evalRuleOperationCompleted = AddressOf Me.OnevalRuleOperationCompleted
            End If
            Me.InvokeAsync("evalRule", New Object() {assertionInfo}, Me.evalRuleOperationCompleted, userState)
        End Sub
        
        Private Sub OnevalRuleOperationCompleted(ByVal arg As Object)
            If (Not (Me.evalRuleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent evalRuleCompleted(Me, New evalRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getActivities", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getActivities(ByVal activitiesFilters As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getActivities", New Object() {activitiesFilters})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getActivitiesAsync(ByVal activitiesFilters As System.Xml.XmlNode)
            Me.getActivitiesAsync(activitiesFilters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getActivitiesAsync(ByVal activitiesFilters As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getActivitiesOperationCompleted Is Nothing) Then
                Me.getActivitiesOperationCompleted = AddressOf Me.OngetActivitiesOperationCompleted
            End If
            Me.InvokeAsync("getActivities", New Object() {activitiesFilters}, Me.getActivitiesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetActivitiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getActivitiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getActivitiesCompleted(Me, New getActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAssignationLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAssignationLog(ByVal caseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getAssignationLog", New Object() {caseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAssignationLogAsync(ByVal caseInfo As System.Xml.XmlNode)
            Me.getAssignationLogAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAssignationLogAsync(ByVal caseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getAssignationLogOperationCompleted Is Nothing) Then
                Me.getAssignationLogOperationCompleted = AddressOf Me.OngetAssignationLogOperationCompleted
            End If
            Me.InvokeAsync("getAssignationLog", New Object() {caseInfo}, Me.getAssignationLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAssignationLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAssignationLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAssignationLogCompleted(Me, New getAssignationLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getClosedActivities", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getClosedActivities(ByVal caseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getClosedActivities", New Object() {caseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getClosedActivitiesAsync(ByVal caseInfo As System.Xml.XmlNode)
            Me.getClosedActivitiesAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClosedActivitiesAsync(ByVal caseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getClosedActivitiesOperationCompleted Is Nothing) Then
                Me.getClosedActivitiesOperationCompleted = AddressOf Me.OngetClosedActivitiesOperationCompleted
            End If
            Me.InvokeAsync("getClosedActivities", New Object() {caseInfo}, Me.getClosedActivitiesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetClosedActivitiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getClosedActivitiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getClosedActivitiesCompleted(Me, New getClosedActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/performActivity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function performActivity(ByVal activityInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("performActivity", New Object() {activityInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub performActivityAsync(ByVal activityInfo As System.Xml.XmlNode)
            Me.performActivityAsync(activityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub performActivityAsync(ByVal activityInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.performActivityOperationCompleted Is Nothing) Then
                Me.performActivityOperationCompleted = AddressOf Me.OnperformActivityOperationCompleted
            End If
            Me.InvokeAsync("performActivity", New Object() {activityInfo}, Me.performActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnperformActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.performActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent performActivityCompleted(Me, New performActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/resumeCases", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function resumeCases(ByVal cases As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("resumeCases", New Object() {cases})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub resumeCasesAsync(ByVal cases As System.Xml.XmlNode)
            Me.resumeCasesAsync(cases, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeCasesAsync(ByVal cases As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.resumeCasesOperationCompleted Is Nothing) Then
                Me.resumeCasesOperationCompleted = AddressOf Me.OnresumeCasesOperationCompleted
            End If
            Me.InvokeAsync("resumeCases", New Object() {cases}, Me.resumeCasesOperationCompleted, userState)
        End Sub
        
        Private Sub OnresumeCasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.resumeCasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent resumeCasesCompleted(Me, New resumeCasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/rollbackCase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function rollbackCase(ByVal caseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("rollbackCase", New Object() {caseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub rollbackCaseAsync(ByVal caseInfo As System.Xml.XmlNode)
            Me.rollbackCaseAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub rollbackCaseAsync(ByVal caseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.rollbackCaseOperationCompleted Is Nothing) Then
                Me.rollbackCaseOperationCompleted = AddressOf Me.OnrollbackCaseOperationCompleted
            End If
            Me.InvokeAsync("rollbackCase", New Object() {caseInfo}, Me.rollbackCaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnrollbackCaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.rollbackCaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent rollbackCaseCompleted(Me, New rollbackCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setEvent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setEvent(ByVal eventInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("setEvent", New Object() {eventInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setEventAsync(ByVal eventInfo As System.Xml.XmlNode)
            Me.setEventAsync(eventInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setEventAsync(ByVal eventInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.setEventOperationCompleted Is Nothing) Then
                Me.setEventOperationCompleted = AddressOf Me.OnsetEventOperationCompleted
            End If
            Me.InvokeAsync("setEvent", New Object() {eventInfo}, Me.setEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.setEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setEventCompleted(Me, New setEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/suspendCases", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function suspendCases(ByVal cases As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("suspendCases", New Object() {cases})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub suspendCasesAsync(ByVal cases As System.Xml.XmlNode)
            Me.suspendCasesAsync(cases, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendCasesAsync(ByVal cases As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.suspendCasesOperationCompleted Is Nothing) Then
                Me.suspendCasesOperationCompleted = AddressOf Me.OnsuspendCasesOperationCompleted
            End If
            Me.InvokeAsync("suspendCases", New Object() {cases}, Me.suspendCasesOperationCompleted, userState)
        End Sub
        
        Private Sub OnsuspendCasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.suspendCasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent suspendCasesCompleted(Me, New suspendCasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/abortCases", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function abortCases(ByVal casesInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("abortCases", New Object() {casesInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub abortCasesAsync(ByVal casesInfo As System.Xml.XmlNode)
            Me.abortCasesAsync(casesInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub abortCasesAsync(ByVal casesInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.abortCasesOperationCompleted Is Nothing) Then
                Me.abortCasesOperationCompleted = AddressOf Me.OnabortCasesOperationCompleted
            End If
            Me.InvokeAsync("abortCases", New Object() {casesInfo}, Me.abortCasesOperationCompleted, userState)
        End Sub
        
        Private Sub OnabortCasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.abortCasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent abortCasesCompleted(Me, New abortCasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getApplications", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getApplications() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getApplications", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getApplicationsAsync()
            Me.getApplicationsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getApplicationsAsync(ByVal userState As Object)
            If (Me.getApplicationsOperationCompleted Is Nothing) Then
                Me.getApplicationsOperationCompleted = AddressOf Me.OngetApplicationsOperationCompleted
            End If
            Me.InvokeAsync("getApplications", New Object(-1) {}, Me.getApplicationsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetApplicationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getApplicationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getApplicationsCompleted(Me, New getApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCategories", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCategories(ByVal application As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCategories", New Object() {application})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCategoriesAsync(ByVal application As System.Xml.XmlNode)
            Me.getCategoriesAsync(application, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCategoriesAsync(ByVal application As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getCategoriesOperationCompleted Is Nothing) Then
                Me.getCategoriesOperationCompleted = AddressOf Me.OngetCategoriesOperationCompleted
            End If
            Me.InvokeAsync("getCategories", New Object() {application}, Me.getCategoriesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCategoriesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCategoriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCategoriesCompleted(Me, New getCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCategories2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCategories2(ByVal applicationName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCategories2", New Object() {applicationName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCategories2Async(ByVal applicationName As String)
            Me.getCategories2Async(applicationName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCategories2Async(ByVal applicationName As String, ByVal userState As Object)
            If (Me.getCategories2OperationCompleted Is Nothing) Then
                Me.getCategories2OperationCompleted = AddressOf Me.OngetCategories2OperationCompleted
            End If
            Me.InvokeAsync("getCategories2", New Object() {applicationName}, Me.getCategories2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetCategories2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getCategories2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCategories2Completed(Me, New getCategories2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCategoriesFromApplicationName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCategoriesFromApplicationName(ByVal applicationName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCategoriesFromApplicationName", New Object() {applicationName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCategoriesFromApplicationNameAsync(ByVal applicationName As String)
            Me.getCategoriesFromApplicationNameAsync(applicationName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCategoriesFromApplicationNameAsync(ByVal applicationName As String, ByVal userState As Object)
            If (Me.getCategoriesFromApplicationNameOperationCompleted Is Nothing) Then
                Me.getCategoriesFromApplicationNameOperationCompleted = AddressOf Me.OngetCategoriesFromApplicationNameOperationCompleted
            End If
            Me.InvokeAsync("getCategoriesFromApplicationName", New Object() {applicationName}, Me.getCategoriesFromApplicationNameOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCategoriesFromApplicationNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCategoriesFromApplicationNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCategoriesFromApplicationNameCompleted(Me, New getCategoriesFromApplicationNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getWorkflowClassesFromCategoryName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkflowClassesFromCategoryName(ByVal categoryName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getWorkflowClassesFromCategoryName", New Object() {categoryName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClassesFromCategoryNameAsync(ByVal categoryName As String)
            Me.getWorkflowClassesFromCategoryNameAsync(categoryName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClassesFromCategoryNameAsync(ByVal categoryName As String, ByVal userState As Object)
            If (Me.getWorkflowClassesFromCategoryNameOperationCompleted Is Nothing) Then
                Me.getWorkflowClassesFromCategoryNameOperationCompleted = AddressOf Me.OngetWorkflowClassesFromCategoryNameOperationCompleted
            End If
            Me.InvokeAsync("getWorkflowClassesFromCategoryName", New Object() {categoryName}, Me.getWorkflowClassesFromCategoryNameOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkflowClassesFromCategoryNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkflowClassesFromCategoryNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkflowClassesFromCategoryNameCompleted(Me, New getWorkflowClassesFromCategoryNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCategoriesLocalized", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCategoriesLocalized(ByVal applicationName As String, ByVal cultureName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCategoriesLocalized", New Object() {applicationName, cultureName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCategoriesLocalizedAsync(ByVal applicationName As String, ByVal cultureName As String)
            Me.getCategoriesLocalizedAsync(applicationName, cultureName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCategoriesLocalizedAsync(ByVal applicationName As String, ByVal cultureName As String, ByVal userState As Object)
            If (Me.getCategoriesLocalizedOperationCompleted Is Nothing) Then
                Me.getCategoriesLocalizedOperationCompleted = AddressOf Me.OngetCategoriesLocalizedOperationCompleted
            End If
            Me.InvokeAsync("getCategoriesLocalized", New Object() {applicationName, cultureName}, Me.getCategoriesLocalizedOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCategoriesLocalizedOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCategoriesLocalizedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCategoriesLocalizedCompleted(Me, New getCategoriesLocalizedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getWorkflowClasses", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkflowClasses(ByVal category As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getWorkflowClasses", New Object() {category})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClassesAsync(ByVal category As System.Xml.XmlNode)
            Me.getWorkflowClassesAsync(category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClassesAsync(ByVal category As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getWorkflowClassesOperationCompleted Is Nothing) Then
                Me.getWorkflowClassesOperationCompleted = AddressOf Me.OngetWorkflowClassesOperationCompleted
            End If
            Me.InvokeAsync("getWorkflowClasses", New Object() {category}, Me.getWorkflowClassesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkflowClassesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkflowClassesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkflowClassesCompleted(Me, New getWorkflowClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getWorkflowClasses2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkflowClasses2(ByVal categoryName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getWorkflowClasses2", New Object() {categoryName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClasses2Async(ByVal categoryName As String)
            Me.getWorkflowClasses2Async(categoryName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkflowClasses2Async(ByVal categoryName As String, ByVal userState As Object)
            If (Me.getWorkflowClasses2OperationCompleted Is Nothing) Then
                Me.getWorkflowClasses2OperationCompleted = AddressOf Me.OngetWorkflowClasses2OperationCompleted
            End If
            Me.InvokeAsync("getWorkflowClasses2", New Object() {categoryName}, Me.getWorkflowClasses2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkflowClasses2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkflowClasses2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkflowClasses2Completed(Me, New getWorkflowClasses2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEvents", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEvents(ByVal activitiesFilters As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getEvents", New Object() {activitiesFilters})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEventsAsync(ByVal activitiesFilters As System.Xml.XmlNode)
            Me.getEventsAsync(activitiesFilters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEventsAsync(ByVal activitiesFilters As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getEventsOperationCompleted Is Nothing) Then
                Me.getEventsOperationCompleted = AddressOf Me.OngetEventsOperationCompleted
            End If
            Me.InvokeAsync("getEvents", New Object() {activitiesFilters}, Me.getEventsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEventsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEventsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEventsCompleted(Me, New getEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCases", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCases(ByVal casesFilters As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCases", New Object() {casesFilters})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCasesAsync(ByVal casesFilters As System.Xml.XmlNode)
            Me.getCasesAsync(casesFilters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCasesAsync(ByVal casesFilters As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getCasesOperationCompleted Is Nothing) Then
                Me.getCasesOperationCompleted = AddressOf Me.OngetCasesOperationCompleted
            End If
            Me.InvokeAsync("getCases", New Object() {casesFilters}, Me.getCasesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCasesCompleted(Me, New getCasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveActivity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveActivity(ByVal activityInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("saveActivity", New Object() {activityInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveActivityAsync(ByVal activityInfo As System.Xml.XmlNode)
            Me.saveActivityAsync(activityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveActivityAsync(ByVal activityInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.saveActivityOperationCompleted Is Nothing) Then
                Me.saveActivityOperationCompleted = AddressOf Me.OnsaveActivityOperationCompleted
            End If
            Me.InvokeAsync("saveActivity", New Object() {activityInfo}, Me.saveActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveActivityCompleted(Me, New saveActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/assignActivity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function assignActivity(ByVal xmlDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("assignActivity", New Object() {xmlDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub assignActivityAsync(ByVal xmlDoc As System.Xml.XmlNode)
            Me.assignActivityAsync(xmlDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub assignActivityAsync(ByVal xmlDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.assignActivityOperationCompleted Is Nothing) Then
                Me.assignActivityOperationCompleted = AddressOf Me.OnassignActivityOperationCompleted
            End If
            Me.InvokeAsync("assignActivity", New Object() {xmlDoc}, Me.assignActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnassignActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.assignActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent assignActivityCompleted(Me, New assignActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub pingCompletedEventHandler(ByVal sender As Object, ByVal e As pingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class pingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub createCasesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As createCasesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCasesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub performActivityAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As performActivityAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class performActivityAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub setEventAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As setEventAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setEventAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCasesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getCasesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCasesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub saveActivityAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As saveActivityAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveActivityAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getActivitiesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getActivitiesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getActivitiesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub suspendCasesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As suspendCasesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class suspendCasesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub resumeCasesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As resumeCasesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class resumeCasesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getClosedActivitiesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getClosedActivitiesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getClosedActivitiesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEventsAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getEventsAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEventsAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getWorkflowClassesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkflowClassesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkflowClassesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCategoriesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getCategoriesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCategoriesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub abortCasesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As abortCasesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class abortCasesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getAssignationLogAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getAssignationLogAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAssignationLogAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CheckPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub assignActivityAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As assignActivityAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class assignActivityAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub grantCaseAccessCompletedEventHandler(ByVal sender As Object, ByVal e As grantCaseAccessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class grantCaseAccessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub revokeCaseAccessCompletedEventHandler(ByVal sender As Object, ByVal e As revokeCaseAccessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class revokeCaseAccessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub cleanTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As cleanTestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cleanTestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub createCasesCompletedEventHandler(ByVal sender As Object, ByVal e As createCasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub evalRuleCompletedEventHandler(ByVal sender As Object, ByVal e As evalRuleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class evalRuleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getActivitiesCompletedEventHandler(ByVal sender As Object, ByVal e As getActivitiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getActivitiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getAssignationLogCompletedEventHandler(ByVal sender As Object, ByVal e As getAssignationLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAssignationLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getClosedActivitiesCompletedEventHandler(ByVal sender As Object, ByVal e As getClosedActivitiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getClosedActivitiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub performActivityCompletedEventHandler(ByVal sender As Object, ByVal e As performActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class performActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub resumeCasesCompletedEventHandler(ByVal sender As Object, ByVal e As resumeCasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class resumeCasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub rollbackCaseCompletedEventHandler(ByVal sender As Object, ByVal e As rollbackCaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class rollbackCaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub setEventCompletedEventHandler(ByVal sender As Object, ByVal e As setEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub suspendCasesCompletedEventHandler(ByVal sender As Object, ByVal e As suspendCasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class suspendCasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub abortCasesCompletedEventHandler(ByVal sender As Object, ByVal e As abortCasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class abortCasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getApplicationsCompletedEventHandler(ByVal sender As Object, ByVal e As getApplicationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getApplicationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCategoriesCompletedEventHandler(ByVal sender As Object, ByVal e As getCategoriesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCategoriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCategories2CompletedEventHandler(ByVal sender As Object, ByVal e As getCategories2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCategories2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCategoriesFromApplicationNameCompletedEventHandler(ByVal sender As Object, ByVal e As getCategoriesFromApplicationNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCategoriesFromApplicationNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getWorkflowClassesFromCategoryNameCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkflowClassesFromCategoryNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkflowClassesFromCategoryNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCategoriesLocalizedCompletedEventHandler(ByVal sender As Object, ByVal e As getCategoriesLocalizedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCategoriesLocalizedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getWorkflowClassesCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkflowClassesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkflowClassesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getWorkflowClasses2CompletedEventHandler(ByVal sender As Object, ByVal e As getWorkflowClasses2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkflowClasses2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEventsCompletedEventHandler(ByVal sender As Object, ByVal e As getEventsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEventsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCasesCompletedEventHandler(ByVal sender As Object, ByVal e As getCasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub saveActivityCompletedEventHandler(ByVal sender As Object, ByVal e As saveActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub assignActivityCompletedEventHandler(ByVal sender As Object, ByVal e As assignActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class assignActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
