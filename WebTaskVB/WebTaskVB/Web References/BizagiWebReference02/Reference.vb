'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace BizagiWebReference02
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="EntityManagerSOASoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class EntityManagerSOA
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getEntitiesAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntitiesUsingSchemaAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveEntityAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntitySchemaStrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cleanTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCaseLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntityFormLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntityLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntitiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCaseDataUsingSchemaLiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCaseDataUsingSchemaLiteAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCaseDataUsingSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCaseDataUsingSchemaAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCaseDataUsingXPathsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCaseDataUsingXPathsAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntitiesUsingSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntitySchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private replicateEntityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private replicateAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveEntityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveEntityWithKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveEntityWithKeyAsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WebTaskVB.My.MySettings.Default.WebTaskVB_BizagiWebReference02_WorkflowEngineSOA
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getEntitiesAsStringCompleted As getEntitiesAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getEntitiesUsingSchemaAsStringCompleted As getEntitiesUsingSchemaAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event saveEntityAsStringCompleted As saveEntityAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getEntitySchemaStrCompleted As getEntitySchemaStrCompletedEventHandler
        
        '''<remarks/>
        Public Event cleanTestDataCompleted As cleanTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event getCaseLogCompleted As getCaseLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getEntityFormLogCompleted As getEntityFormLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getEntityLogCompleted As getEntityLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getEntitiesCompleted As getEntitiesCompletedEventHandler
        
        '''<remarks/>
        Public Event getCaseDataUsingSchemaLiteCompleted As getCaseDataUsingSchemaLiteCompletedEventHandler
        
        '''<remarks/>
        Public Event getCaseDataUsingSchemaLiteAsStringCompleted As getCaseDataUsingSchemaLiteAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getCaseDataUsingSchemaCompleted As getCaseDataUsingSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event getCaseDataUsingSchemaAsStringCompleted As getCaseDataUsingSchemaAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getCaseDataUsingXPathsCompleted As getCaseDataUsingXPathsCompletedEventHandler
        
        '''<remarks/>
        Public Event getCaseDataUsingXPathsAsStringCompleted As getCaseDataUsingXPathsAsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getEntitiesUsingSchemaCompleted As getEntitiesUsingSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event getEntitySchemaCompleted As getEntitySchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event replicateEntityCompleted As replicateEntityCompletedEventHandler
        
        '''<remarks/>
        Public Event replicateAllCompleted As replicateAllCompletedEventHandler
        
        '''<remarks/>
        Public Event saveEntityCompleted As saveEntityCompletedEventHandler
        
        '''<remarks/>
        Public Event saveEntityWithKeyCompleted As saveEntityWithKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event saveEntityWithKeyAsStringCompleted As saveEntityWithKeyAsStringCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntitiesAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntitiesAsString(ByVal entitiesInfo As String) As String
            Dim results() As Object = Me.Invoke("getEntitiesAsString", New Object() {entitiesInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntitiesAsStringAsync(ByVal entitiesInfo As String)
            Me.getEntitiesAsStringAsync(entitiesInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntitiesAsStringAsync(ByVal entitiesInfo As String, ByVal userState As Object)
            If (Me.getEntitiesAsStringOperationCompleted Is Nothing) Then
                Me.getEntitiesAsStringOperationCompleted = AddressOf Me.OngetEntitiesAsStringOperationCompleted
            End If
            Me.InvokeAsync("getEntitiesAsString", New Object() {entitiesInfo}, Me.getEntitiesAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntitiesAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntitiesAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntitiesAsStringCompleted(Me, New getEntitiesAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntitiesUsingSchemaAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntitiesUsingSchemaAsString(ByVal entitiesInfo As String, ByVal schema As String) As String
            Dim results() As Object = Me.Invoke("getEntitiesUsingSchemaAsString", New Object() {entitiesInfo, schema})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntitiesUsingSchemaAsStringAsync(ByVal entitiesInfo As String, ByVal schema As String)
            Me.getEntitiesUsingSchemaAsStringAsync(entitiesInfo, schema, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntitiesUsingSchemaAsStringAsync(ByVal entitiesInfo As String, ByVal schema As String, ByVal userState As Object)
            If (Me.getEntitiesUsingSchemaAsStringOperationCompleted Is Nothing) Then
                Me.getEntitiesUsingSchemaAsStringOperationCompleted = AddressOf Me.OngetEntitiesUsingSchemaAsStringOperationCompleted
            End If
            Me.InvokeAsync("getEntitiesUsingSchemaAsString", New Object() {entitiesInfo, schema}, Me.getEntitiesUsingSchemaAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntitiesUsingSchemaAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntitiesUsingSchemaAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntitiesUsingSchemaAsStringCompleted(Me, New getEntitiesUsingSchemaAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveEntityAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveEntityAsString(ByVal entityInfo As String) As String
            Dim results() As Object = Me.Invoke("saveEntityAsString", New Object() {entityInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveEntityAsStringAsync(ByVal entityInfo As String)
            Me.saveEntityAsStringAsync(entityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveEntityAsStringAsync(ByVal entityInfo As String, ByVal userState As Object)
            If (Me.saveEntityAsStringOperationCompleted Is Nothing) Then
                Me.saveEntityAsStringOperationCompleted = AddressOf Me.OnsaveEntityAsStringOperationCompleted
            End If
            Me.InvokeAsync("saveEntityAsString", New Object() {entityInfo}, Me.saveEntityAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveEntityAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveEntityAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveEntityAsStringCompleted(Me, New saveEntityAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntitySchemaStr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntitySchemaStr(ByVal entityName As String) As String
            Dim results() As Object = Me.Invoke("getEntitySchemaStr", New Object() {entityName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntitySchemaStrAsync(ByVal entityName As String)
            Me.getEntitySchemaStrAsync(entityName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntitySchemaStrAsync(ByVal entityName As String, ByVal userState As Object)
            If (Me.getEntitySchemaStrOperationCompleted Is Nothing) Then
                Me.getEntitySchemaStrOperationCompleted = AddressOf Me.OngetEntitySchemaStrOperationCompleted
            End If
            Me.InvokeAsync("getEntitySchemaStr", New Object() {entityName}, Me.getEntitySchemaStrOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntitySchemaStrOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntitySchemaStrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntitySchemaStrCompleted(Me, New getEntitySchemaStrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cleanTestData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cleanTestData(ByVal testCaseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("cleanTestData", New Object() {testCaseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cleanTestDataAsync(ByVal testCaseInfo As System.Xml.XmlNode)
            Me.cleanTestDataAsync(testCaseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cleanTestDataAsync(ByVal testCaseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.cleanTestDataOperationCompleted Is Nothing) Then
                Me.cleanTestDataOperationCompleted = AddressOf Me.OncleanTestDataOperationCompleted
            End If
            Me.InvokeAsync("cleanTestData", New Object() {testCaseInfo}, Me.cleanTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OncleanTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.cleanTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cleanTestDataCompleted(Me, New cleanTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCaseLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCaseLog(ByVal caseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCaseLog", New Object() {caseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCaseLogAsync(ByVal caseInfo As System.Xml.XmlNode)
            Me.getCaseLogAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCaseLogAsync(ByVal caseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getCaseLogOperationCompleted Is Nothing) Then
                Me.getCaseLogOperationCompleted = AddressOf Me.OngetCaseLogOperationCompleted
            End If
            Me.InvokeAsync("getCaseLog", New Object() {caseInfo}, Me.getCaseLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCaseLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCaseLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCaseLogCompleted(Me, New getCaseLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntityFormLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntityFormLog(ByVal caseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getEntityFormLog", New Object() {caseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntityFormLogAsync(ByVal caseInfo As System.Xml.XmlNode)
            Me.getEntityFormLogAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntityFormLogAsync(ByVal caseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getEntityFormLogOperationCompleted Is Nothing) Then
                Me.getEntityFormLogOperationCompleted = AddressOf Me.OngetEntityFormLogOperationCompleted
            End If
            Me.InvokeAsync("getEntityFormLog", New Object() {caseInfo}, Me.getEntityFormLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntityFormLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntityFormLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntityFormLogCompleted(Me, New getEntityFormLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntityLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntityLog(ByVal caseInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getEntityLog", New Object() {caseInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntityLogAsync(ByVal caseInfo As System.Xml.XmlNode)
            Me.getEntityLogAsync(caseInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntityLogAsync(ByVal caseInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getEntityLogOperationCompleted Is Nothing) Then
                Me.getEntityLogOperationCompleted = AddressOf Me.OngetEntityLogOperationCompleted
            End If
            Me.InvokeAsync("getEntityLog", New Object() {caseInfo}, Me.getEntityLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntityLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntityLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntityLogCompleted(Me, New getEntityLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntities", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntities(ByVal entitiesInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getEntities", New Object() {entitiesInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntitiesAsync(ByVal entitiesInfo As System.Xml.XmlNode)
            Me.getEntitiesAsync(entitiesInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntitiesAsync(ByVal entitiesInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getEntitiesOperationCompleted Is Nothing) Then
                Me.getEntitiesOperationCompleted = AddressOf Me.OngetEntitiesOperationCompleted
            End If
            Me.InvokeAsync("getEntities", New Object() {entitiesInfo}, Me.getEntitiesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntitiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntitiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntitiesCompleted(Me, New getEntitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCaseDataUsingSchemaLite", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCaseDataUsingSchemaLite(ByVal idCase As Integer, ByVal xsd As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCaseDataUsingSchemaLite", New Object() {idCase, xsd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaLiteAsync(ByVal idCase As Integer, ByVal xsd As System.Xml.XmlNode)
            Me.getCaseDataUsingSchemaLiteAsync(idCase, xsd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaLiteAsync(ByVal idCase As Integer, ByVal xsd As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getCaseDataUsingSchemaLiteOperationCompleted Is Nothing) Then
                Me.getCaseDataUsingSchemaLiteOperationCompleted = AddressOf Me.OngetCaseDataUsingSchemaLiteOperationCompleted
            End If
            Me.InvokeAsync("getCaseDataUsingSchemaLite", New Object() {idCase, xsd}, Me.getCaseDataUsingSchemaLiteOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCaseDataUsingSchemaLiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCaseDataUsingSchemaLiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCaseDataUsingSchemaLiteCompleted(Me, New getCaseDataUsingSchemaLiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCaseDataUsingSchemaLiteAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCaseDataUsingSchemaLiteAsString(ByVal idCase As Integer, ByVal sxsd As String) As String
            Dim results() As Object = Me.Invoke("getCaseDataUsingSchemaLiteAsString", New Object() {idCase, sxsd})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaLiteAsStringAsync(ByVal idCase As Integer, ByVal sxsd As String)
            Me.getCaseDataUsingSchemaLiteAsStringAsync(idCase, sxsd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaLiteAsStringAsync(ByVal idCase As Integer, ByVal sxsd As String, ByVal userState As Object)
            If (Me.getCaseDataUsingSchemaLiteAsStringOperationCompleted Is Nothing) Then
                Me.getCaseDataUsingSchemaLiteAsStringOperationCompleted = AddressOf Me.OngetCaseDataUsingSchemaLiteAsStringOperationCompleted
            End If
            Me.InvokeAsync("getCaseDataUsingSchemaLiteAsString", New Object() {idCase, sxsd}, Me.getCaseDataUsingSchemaLiteAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCaseDataUsingSchemaLiteAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCaseDataUsingSchemaLiteAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCaseDataUsingSchemaLiteAsStringCompleted(Me, New getCaseDataUsingSchemaLiteAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCaseDataUsingSchema", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCaseDataUsingSchema(ByVal idCase As String, ByVal idWorkItem As String, ByVal xsd As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCaseDataUsingSchema", New Object() {idCase, idWorkItem, xsd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaAsync(ByVal idCase As String, ByVal idWorkItem As String, ByVal xsd As System.Xml.XmlNode)
            Me.getCaseDataUsingSchemaAsync(idCase, idWorkItem, xsd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaAsync(ByVal idCase As String, ByVal idWorkItem As String, ByVal xsd As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getCaseDataUsingSchemaOperationCompleted Is Nothing) Then
                Me.getCaseDataUsingSchemaOperationCompleted = AddressOf Me.OngetCaseDataUsingSchemaOperationCompleted
            End If
            Me.InvokeAsync("getCaseDataUsingSchema", New Object() {idCase, idWorkItem, xsd}, Me.getCaseDataUsingSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCaseDataUsingSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCaseDataUsingSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCaseDataUsingSchemaCompleted(Me, New getCaseDataUsingSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCaseDataUsingSchemaAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCaseDataUsingSchemaAsString(ByVal idCase As String, ByVal idWorkItem As String, ByVal sxsd As String) As String
            Dim results() As Object = Me.Invoke("getCaseDataUsingSchemaAsString", New Object() {idCase, idWorkItem, sxsd})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaAsStringAsync(ByVal idCase As String, ByVal idWorkItem As String, ByVal sxsd As String)
            Me.getCaseDataUsingSchemaAsStringAsync(idCase, idWorkItem, sxsd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingSchemaAsStringAsync(ByVal idCase As String, ByVal idWorkItem As String, ByVal sxsd As String, ByVal userState As Object)
            If (Me.getCaseDataUsingSchemaAsStringOperationCompleted Is Nothing) Then
                Me.getCaseDataUsingSchemaAsStringOperationCompleted = AddressOf Me.OngetCaseDataUsingSchemaAsStringOperationCompleted
            End If
            Me.InvokeAsync("getCaseDataUsingSchemaAsString", New Object() {idCase, idWorkItem, sxsd}, Me.getCaseDataUsingSchemaAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCaseDataUsingSchemaAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCaseDataUsingSchemaAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCaseDataUsingSchemaAsStringCompleted(Me, New getCaseDataUsingSchemaAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCaseDataUsingXPaths", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCaseDataUsingXPaths(ByVal xml As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getCaseDataUsingXPaths", New Object() {xml})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingXPathsAsync(ByVal xml As System.Xml.XmlNode)
            Me.getCaseDataUsingXPathsAsync(xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingXPathsAsync(ByVal xml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getCaseDataUsingXPathsOperationCompleted Is Nothing) Then
                Me.getCaseDataUsingXPathsOperationCompleted = AddressOf Me.OngetCaseDataUsingXPathsOperationCompleted
            End If
            Me.InvokeAsync("getCaseDataUsingXPaths", New Object() {xml}, Me.getCaseDataUsingXPathsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCaseDataUsingXPathsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCaseDataUsingXPathsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCaseDataUsingXPathsCompleted(Me, New getCaseDataUsingXPathsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCaseDataUsingXPathsAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCaseDataUsingXPathsAsString(ByVal sXml As String) As String
            Dim results() As Object = Me.Invoke("getCaseDataUsingXPathsAsString", New Object() {sXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingXPathsAsStringAsync(ByVal sXml As String)
            Me.getCaseDataUsingXPathsAsStringAsync(sXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCaseDataUsingXPathsAsStringAsync(ByVal sXml As String, ByVal userState As Object)
            If (Me.getCaseDataUsingXPathsAsStringOperationCompleted Is Nothing) Then
                Me.getCaseDataUsingXPathsAsStringOperationCompleted = AddressOf Me.OngetCaseDataUsingXPathsAsStringOperationCompleted
            End If
            Me.InvokeAsync("getCaseDataUsingXPathsAsString", New Object() {sXml}, Me.getCaseDataUsingXPathsAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCaseDataUsingXPathsAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCaseDataUsingXPathsAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCaseDataUsingXPathsAsStringCompleted(Me, New getCaseDataUsingXPathsAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntitiesUsingSchema", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntitiesUsingSchema(ByVal entitiesInfo As System.Xml.XmlNode, ByVal schema As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getEntitiesUsingSchema", New Object() {entitiesInfo, schema})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntitiesUsingSchemaAsync(ByVal entitiesInfo As System.Xml.XmlNode, ByVal schema As System.Xml.XmlNode)
            Me.getEntitiesUsingSchemaAsync(entitiesInfo, schema, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntitiesUsingSchemaAsync(ByVal entitiesInfo As System.Xml.XmlNode, ByVal schema As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.getEntitiesUsingSchemaOperationCompleted Is Nothing) Then
                Me.getEntitiesUsingSchemaOperationCompleted = AddressOf Me.OngetEntitiesUsingSchemaOperationCompleted
            End If
            Me.InvokeAsync("getEntitiesUsingSchema", New Object() {entitiesInfo, schema}, Me.getEntitiesUsingSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntitiesUsingSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntitiesUsingSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntitiesUsingSchemaCompleted(Me, New getEntitiesUsingSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEntitySchema", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEntitySchema(ByVal entityName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getEntitySchema", New Object() {entityName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEntitySchemaAsync(ByVal entityName As String)
            Me.getEntitySchemaAsync(entityName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEntitySchemaAsync(ByVal entityName As String, ByVal userState As Object)
            If (Me.getEntitySchemaOperationCompleted Is Nothing) Then
                Me.getEntitySchemaOperationCompleted = AddressOf Me.OngetEntitySchemaOperationCompleted
            End If
            Me.InvokeAsync("getEntitySchema", New Object() {entityName}, Me.getEntitySchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntitySchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEntitySchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntitySchemaCompleted(Me, New getEntitySchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/replicateEntity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function replicateEntity(ByVal entityName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("replicateEntity", New Object() {entityName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub replicateEntityAsync(ByVal entityName As String)
            Me.replicateEntityAsync(entityName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub replicateEntityAsync(ByVal entityName As String, ByVal userState As Object)
            If (Me.replicateEntityOperationCompleted Is Nothing) Then
                Me.replicateEntityOperationCompleted = AddressOf Me.OnreplicateEntityOperationCompleted
            End If
            Me.InvokeAsync("replicateEntity", New Object() {entityName}, Me.replicateEntityOperationCompleted, userState)
        End Sub
        
        Private Sub OnreplicateEntityOperationCompleted(ByVal arg As Object)
            If (Not (Me.replicateEntityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent replicateEntityCompleted(Me, New replicateEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/replicateAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function replicateAll() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("replicateAll", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub replicateAllAsync()
            Me.replicateAllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub replicateAllAsync(ByVal userState As Object)
            If (Me.replicateAllOperationCompleted Is Nothing) Then
                Me.replicateAllOperationCompleted = AddressOf Me.OnreplicateAllOperationCompleted
            End If
            Me.InvokeAsync("replicateAll", New Object(-1) {}, Me.replicateAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnreplicateAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.replicateAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent replicateAllCompleted(Me, New replicateAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveEntity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveEntity(ByVal entityInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("saveEntity", New Object() {entityInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveEntityAsync(ByVal entityInfo As System.Xml.XmlNode)
            Me.saveEntityAsync(entityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveEntityAsync(ByVal entityInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.saveEntityOperationCompleted Is Nothing) Then
                Me.saveEntityOperationCompleted = AddressOf Me.OnsaveEntityOperationCompleted
            End If
            Me.InvokeAsync("saveEntity", New Object() {entityInfo}, Me.saveEntityOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveEntityOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveEntityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveEntityCompleted(Me, New saveEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveEntityWithKey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveEntityWithKey(ByVal oEntityKey As Object, ByVal entityInfo As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("saveEntityWithKey", New Object() {oEntityKey, entityInfo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveEntityWithKeyAsync(ByVal oEntityKey As Object, ByVal entityInfo As System.Xml.XmlNode)
            Me.saveEntityWithKeyAsync(oEntityKey, entityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveEntityWithKeyAsync(ByVal oEntityKey As Object, ByVal entityInfo As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.saveEntityWithKeyOperationCompleted Is Nothing) Then
                Me.saveEntityWithKeyOperationCompleted = AddressOf Me.OnsaveEntityWithKeyOperationCompleted
            End If
            Me.InvokeAsync("saveEntityWithKey", New Object() {oEntityKey, entityInfo}, Me.saveEntityWithKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveEntityWithKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveEntityWithKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveEntityWithKeyCompleted(Me, New saveEntityWithKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveEntityWithKeyAsString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveEntityWithKeyAsString(ByVal oEntityKey As Object, ByVal entityInfo As String) As String
            Dim results() As Object = Me.Invoke("saveEntityWithKeyAsString", New Object() {oEntityKey, entityInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveEntityWithKeyAsStringAsync(ByVal oEntityKey As Object, ByVal entityInfo As String)
            Me.saveEntityWithKeyAsStringAsync(oEntityKey, entityInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveEntityWithKeyAsStringAsync(ByVal oEntityKey As Object, ByVal entityInfo As String, ByVal userState As Object)
            If (Me.saveEntityWithKeyAsStringOperationCompleted Is Nothing) Then
                Me.saveEntityWithKeyAsStringOperationCompleted = AddressOf Me.OnsaveEntityWithKeyAsStringOperationCompleted
            End If
            Me.InvokeAsync("saveEntityWithKeyAsString", New Object() {oEntityKey, entityInfo}, Me.saveEntityWithKeyAsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveEntityWithKeyAsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveEntityWithKeyAsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveEntityWithKeyAsStringCompleted(Me, New saveEntityWithKeyAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntitiesAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getEntitiesAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntitiesAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntitiesUsingSchemaAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getEntitiesUsingSchemaAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntitiesUsingSchemaAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub saveEntityAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As saveEntityAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveEntityAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntitySchemaStrCompletedEventHandler(ByVal sender As Object, ByVal e As getEntitySchemaStrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntitySchemaStrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub cleanTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As cleanTestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cleanTestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCaseLogCompletedEventHandler(ByVal sender As Object, ByVal e As getCaseLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCaseLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntityFormLogCompletedEventHandler(ByVal sender As Object, ByVal e As getEntityFormLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntityFormLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntityLogCompletedEventHandler(ByVal sender As Object, ByVal e As getEntityLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntityLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntitiesCompletedEventHandler(ByVal sender As Object, ByVal e As getEntitiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntitiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCaseDataUsingSchemaLiteCompletedEventHandler(ByVal sender As Object, ByVal e As getCaseDataUsingSchemaLiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCaseDataUsingSchemaLiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCaseDataUsingSchemaLiteAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getCaseDataUsingSchemaLiteAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCaseDataUsingSchemaLiteAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCaseDataUsingSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As getCaseDataUsingSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCaseDataUsingSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCaseDataUsingSchemaAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getCaseDataUsingSchemaAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCaseDataUsingSchemaAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCaseDataUsingXPathsCompletedEventHandler(ByVal sender As Object, ByVal e As getCaseDataUsingXPathsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCaseDataUsingXPathsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getCaseDataUsingXPathsAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getCaseDataUsingXPathsAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCaseDataUsingXPathsAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntitiesUsingSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As getEntitiesUsingSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntitiesUsingSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub getEntitySchemaCompletedEventHandler(ByVal sender As Object, ByVal e As getEntitySchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEntitySchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub replicateEntityCompletedEventHandler(ByVal sender As Object, ByVal e As replicateEntityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class replicateEntityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub replicateAllCompletedEventHandler(ByVal sender As Object, ByVal e As replicateAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class replicateAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub saveEntityCompletedEventHandler(ByVal sender As Object, ByVal e As saveEntityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveEntityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub saveEntityWithKeyCompletedEventHandler(ByVal sender As Object, ByVal e As saveEntityWithKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveEntityWithKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub saveEntityWithKeyAsStringCompletedEventHandler(ByVal sender As Object, ByVal e As saveEntityWithKeyAsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveEntityWithKeyAsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
